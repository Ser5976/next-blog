import { NextRequest, NextResponse } from 'next/server';
import { auth, clerkClient } from '@clerk/nextjs/server';

import { CreateUserInput, UserService } from '@/entities/user';

export async function GET(request: NextRequest) {
  let clerkUserId: string | null = null;
  console.log('Sync user endpoint called');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk
    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    clerkUserId = userId;

    // –ü–æ–ª—É—á–∞–µ–º redirect_url –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const searchParams = request.nextUrl.searchParams;
    const redirectUrl = searchParams.get('redirect_url') || '/';

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk
    const clerk = await clerkClient();
    const clerkUser = await clerk.users.getUser(userId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const userEmail = clerkUser.emailAddresses[0]?.emailAddress;
    if (!userEmail) {
      throw new Error('User email is required');
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î
    const userData: CreateUserInput = {
      clerkId: clerkUser.id,
      email: userEmail,
      firstName: clerkUser.firstName || '',
      lastName: clerkUser.lastName || '',
      imageUrl: clerkUser.imageUrl,
      role:
        (clerkUser.publicMetadata?.role as 'USER' | 'AUTHOR' | 'ADMIN') ||
        'USER',
    };

    await UserService.createUser(userData);

    console.log('User synced successfully, redirecting to:', redirectUrl);
    const successUrl = new URL(redirectUrl, request.url);
    successUrl.searchParams.set('welcome', 'true');

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return NextResponse.redirect(successUrl);
  } catch (error) {
    console.error('Sync user error:', error);

    //  –ü–†–ê–í–ò–õ–¨–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    let errorType = 'sync_failed'; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (error instanceof Error) {
      if (error.message === 'email_exists') {
        errorType = 'email_exists';
      } else if (
        error.message.includes('email') ||
        error.message.includes('unique')
      ) {
        errorType = 'email_exists';
      }
    }

    // üî¥ –û–¢–ö–ê–¢: –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Clerk –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if (clerkUserId && errorType !== 'email_exists') {
      // –î–ª—è email_exists –Ω–µ —É–¥–∞–ª—è–µ–º - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è
      try {
        console.log(
          'Attempting rollback: deleting user from Clerk',
          clerkUserId
        );
        const clerk = await clerkClient();
        await clerk.users.deleteUser(clerkUserId);
        console.log('Rollback successful: user deleted from Clerk');
      } catch (rollbackError) {
        console.error(
          'ROLLBACK FAILED: Could not delete user from Clerk:',
          rollbackError
        );
      }
    }

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    const errorUrl = new URL('/auth-error', request.url);
    errorUrl.searchParams.set('error', errorType); //  errorType –≤–º–µ—Å—Ç–æ error.massege

    return NextResponse.redirect(errorUrl);
  }
}
